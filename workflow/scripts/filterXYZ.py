#!/usr/bin/env python3

""" Extract specific atom group from XYZ file """

import os
import re
import sys
import logging
import argparse
import fileinput
import collections

__version__ = '1.0.0'


def main(file, groupFile, group, **kwargs):

    groups = readGroup(groupFile)
    range = getIDRange(groups, group)
    nAtoms = range.end - range.start + 1
    with fileinput.input(file) as fh:
        for line in fh:
            line = line.strip()
            if not line:
                continue
            if nAtomLine(line):
                print(nAtoms)
            elif commentLine(line):
                counter = 1
                print(line)
            elif coordinateLine(line):
                if range.start <= counter <= range.end:
                    print(line)
                    counter += 1


def commentLine(line):
    return line.startswith('Atoms')


def coordinateLine(line):
    return len(line.split()) == 4


def nAtomLine(line):
    try:
        atoms = int(line.strip())
        return True
    except ValueError:
        return False


def getIDRange(groups, group):
    try:
        range = groups[group]
    except KeyError:
        logging.error(f'Group {group} does not appear in group file.')
        sys.exit(1)
    return range


def readGroup(groupFile):
    Range = collections.namedtuple('Range', 'start end')
    groups = {}
    with open(groupFile) as fh:
        for line in fh:
            if not line.startswith('group'):
                continue
            line = line.split()
            group = line[1]
            start, end = line[3].split(':')
            groups[group] = Range(start=int(start), end=int(end))
    return groups


def parse_arguments():

    custom = argparse.ArgumentParser(add_help=False)
    custom.set_defaults(function=main)
    custom.add_argument(
        'file', metavar='XYZ', nargs='?', default=[],
        help='Coordinate file generated by lammps (default: stdin)')
    custom.add_argument(
        '--groupFile', required=True,
        help='File containing group designations from createPolymer.py')
    custom.add_argument(
        '--group', required=True,
        help='Desired group to filter')
    epilog='Stephen Richer, University of Bath, Bath, UK (sr467@bath.ac.uk)'

    base = argparse.ArgumentParser(add_help=False)
    base.add_argument(
        '--version', action='version', version=f'%(prog)s {__version__}')
    base.add_argument(
        '--verbose', action='store_const', const=logging.DEBUG,
        default=logging.INFO, help='verbose logging for debugging')

    parser = argparse.ArgumentParser(
        epilog=epilog, description=__doc__, parents=[base, custom])
    args = parser.parse_args()

    log_format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s'
    logging.basicConfig(level=args.verbose, format=log_format)

    return args


if __name__ == '__main__':
    args = parse_arguments()
    return_code = args.function(**vars(args))
    logging.shutdown()
    sys.exit(return_code)
