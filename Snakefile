#!/usr/bin/env python3

from set_config import set_config

BASE = workflow.basedir

# Define path to conda environment specifications
ENVS = f'{BASE}/workflow/envs'
# Defne path to custom scripts directory
SCRIPTS = f'{BASE}/workflow/scripts'

configfile: f'{BASE}/config/config.yaml'

# Defaults configuration file - use empty string to represent no default value.
default_config = {
    'workdir':      workflow.basedir,
    'n_molecules': 1000,
    'mode' :       0,
    'name' :       'homopolymer',
    'timestep':    1000,
    'delay':       10,
    'loop':        0
}
config = set_config(config, default_config)

workdir : config['workdir']

# Define global configuration variables
NAME = config['name']

rule all:
    input:
        f'vmd/{NAME}.gif'

rule compile_generate_polymer:
    input:
        f'{SCRIPTS}/generate_polymer.c++'
    output:
        f'{SCRIPTS}/generate_polymer'
    log:
        'logs/compile_generate_polyer.log'
    conda:
        f'{ENVS}/gcc.yaml'
    shell:
        'g++ -O3 -o {output} {input} &> {log}'

rule generate_polymer:
    input:
        script = rules.compile_generate_polymer.output
    output:
        f'polymer/poly.n{config["n_molecules"]}.dat'
    params:
        n_molecules = config['n_molecules'],
        mode = config['mode']
    log:
        f'logs/generate_polymer.log'
    shell:
        '{input.script} {params.n_molecules} {params.mode} > {output} 2> {log}'

rule lammps:
    input:
        rules.generate_polymer.output
    output:
        f'lammps/XYZ_{NAME}.xyz'
    params:
        outdir = directory(f'lammps'),
        timestep = config['timestep']
    log:
        f'logs/lammps.log'
    conda:
        f'{ENVS}/lammps.yaml'
    shell:
        'lmp_serial '
            '-var infile {input} '
            '-var outdir {params.outdir} '
            '-var name {NAME} '
            '-var timestep {params.timestep} '
            '-in {SCRIPTS}/run.lam '
            '-log /dev/null '
        '&> {log}'

checkpoint vmd:
    input:
        rules.lammps.output
    output:
        directory(f'vmd/sequence')
    log:
        f'logs/vmd.log'
    conda:
        f'{ENVS}/vmd.yaml'
    shell:
        'vmd -eofexit -nt -displaydev none -args {input} {output} '
            '< {SCRIPTS}/vmd.tcl '
        '&> {log}'

def aggregate_vmd(wildcards):
    """ Return all RGB files generated by vmd checkpoint. """

    dir = checkpoints.vmd.get(**wildcards).output[0]
    images = expand('{dir}/{i}.rgb',
           i=glob_wildcards(os.path.join(dir, '{i}.rgb')).i,
           dir=dir)
    return sorted(images)

rule create_gif:
    input:
        rules.vmd.output,
        images = aggregate_vmd
    output:
        f'vmd/{NAME}.gif'
    params:
        delay = config['delay'],
        loop = config['loop']
    log:
        f'logs/create_gif.log'
    conda:
        f'{ENVS}/imagemagick.yaml'
    shell:
        'convert -delay {params.delay} -loop {params.loop} '
            '{input.images} {output} '
        '&> {log}'
